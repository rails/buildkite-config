#!/usr/bin/env ruby
# frozen_string_literal: true

require "json"
require "net/http"
require "pathname"
require "yaml"
require_relative "lib/buildkite_config"

config = Buildkite::Config::Generate.new(ARGV.shift || File.expand_path("../..", __FILE__))

RUBIES = []
SOFT_FAIL = []

MASTER_RUBY = "rubylang/ruby:master-nightly-jammy"
SOFT_FAIL << MASTER_RUBY

# Adds yjit: onto the master ruby image string so we
# know when to turn on YJIT via the environment variable.
# Same as master ruby, we want this to soft fail.
YJIT_RUBY = "yjit:#{MASTER_RUBY}"
SOFT_FAIL << YJIT_RUBY

# Run steps for newer Rubies first.
SOFT_FAIL.reverse!

config.soft_fail = SOFT_FAIL

# Run soft-failing Ruby steps last.
RUBIES.concat config.soft_fail

config.default_ruby = RUBIES.last
config.rubies = RUBIES

# GROUP 1: Runs additional isolated tests for non-PR builds
%w(
  actionpack      test                default
  actionmailer    test                default
  activemodel     test                default
  activesupport   test                default
  actionview      test                default
  actiontext      test                default
  activejob       test                default
  activerecord    mysql2:test         mysqldb
  activerecord    trilogy:test        mysqldb
  activerecord    postgresql:test     postgresdb
  activerecord    sqlite3:test        default
).each_slice(3) do |dir, task, service|
  next if config.rails_version < Gem::Version.new("7.1.0.alpha") && task == "trilogy:test"

  config.add_steps_for(dir, task, service: service)

  next unless config.mainline?

  if dir == "activerecord"
    config.add_step_for(dir, task.sub(":test", ":isolated_test"), service: service) do |x|
      x["parallelism"] = 5 if config.root.join("activerecord/Rakefile").read.include?("BUILDKITE_PARALLEL")
    end
  elsif dir == "actiontext"
    # added during 7.1 development on main
    if config.root.join("actiontext/Rakefile").read.include?("task :isolated")
      config.add_step_for(dir, "#{task}:isolated", service: service)
    end
  else
    config.add_step_for(dir, "#{task}:isolated", service: service)
  end
end

# GROUP 2: No isolated tests, runs for each supported ruby
%w(
  activestorage   test                default
  actionmailbox   test                default
  guides          test                default
).each_slice(3) do |dir, task, service|
  config.add_steps_for(dir, task, service: service)
end

# GROUP 3: Special cases

config.add_steps_for("actioncable", "test", service: "postgresdb", pre_steps: ["cd ./activerecord", "bundle exec rake db:postgresql:rebuild", "cd -"])

if config.rails_version >= Gem::Version.new("5.1.x")
  config.add_step_for("activerecord", "sqlite3_mem:test", service: "default")
end
if config.rails_version >= Gem::Version.new("6.1.x")
  config.add_step_for("activerecord", "mysql2:test", service: "mysqldb") do |x|
    x["label"] += " [prepared_statements]"
    x["env"]["MYSQL_PREPARED_STATEMENTS"] = "true"
  end
end
config.add_step_for("activerecord", "mysql2:test", service: "mysqldb") do |x|
  x["label"] += " [mysql_5_7]"
  x["env"]["MYSQL_IMAGE"] = "mysql:5.7"
end
if config.rails_version >= Gem::Version.new("7.1.0.alpha")
  config.add_step_for("activerecord", "trilogy:test", service: "mysqldb") do |x|
    x["label"] += " [mysql_5_7]"
    x["env"]["MYSQL_IMAGE"] = "mysql:5.7"
  end
end
if config.rails_version >= Gem::Version.new("5.x")
  config.add_step_for("activerecord", "mysql2:test", service: "mysqldb") do |x|
    x["label"] += " [mariadb]"
    x["env"]["MYSQL_IMAGE"] =
      if config.rails_version < Gem::Version.new("6.x")
        "mariadb:10.2"
      else
        "mariadb:latest"
      end
  end
end
if config.rails_version >= Gem::Version.new("7.1.0.alpha")
  config.add_step_for("activerecord", "trilogy:test", service: "mysqldb") do |x|
    x["label"] += " [mariadb]"
    x["env"]["MYSQL_IMAGE"] = "mariadb:latest"
  end
end
config.add_steps_for("actioncable", "test:integration", service: "default") do |x|
  if config.rails_version < Gem::Version.new("6.x")
    x["soft_fail"] = true
  else
    x["retry"] = { "automatic" => { "limit" => 3 } }
  end
end
if config.root.join("actionview/Rakefile").read.include?("task :ujs")
  config.add_step_for("actionview", "test:ujs", service: "actionview") do |x|
    x["retry"] = { "automatic" => { "limit" => 3 } }
  end
end
config.add_steps_for("activejob", "test:integration", service: "activejob") do |x|
  # Enable soft_fail until the problem in queue_classic is solved.
  # https://github.com/rails/rails/pull/37517#issuecomment-545370408
  x["soft_fail"] = true # if config.rails_version < Gem::Version.new("5.x")
end
config.add_steps_for("railties", "test", service: "railties") do |x|
  x["parallelism"] = 12 if config.root.join("railties/Rakefile").read.include?("BUILDKITE_PARALLEL")
end

config.add_step_for("actionpack", "test", service: "default", pre_steps: ["bundle install"]) do |x|
  x["label"] += " [rack-2]"
  x["env"]["RACK"] = "~> 2.0"
end

config.add_step_for("railties", "test", service: "railties", pre_steps: ["bundle install"]) do |x|
  x["parallelism"] = 12 if config.root.join("railties/Rakefile").read.include?("BUILDKITE_PARALLEL")
  x["label"] += " [rack-2]"
  x["env"]["RACK"] = "~> 2.0"
end

config.add_step_for("actionpack", "test", service: "default", pre_steps: ["rm Gemfile.lock", "bundle install"]) do |x|
  x["label"] += " [rack-head]"
  x["env"]["RACK"] = "head"
  x["soft_fail"] = true
end

config.add_step_for("railties", "test", service: "railties", pre_steps: ["rm Gemfile.lock", "bundle install"]) do |x|
  x["parallelism"] = 12 if config.root.join("railties/Rakefile").read.include?("BUILDKITE_PARALLEL")
  x["label"] += " [rack-head]"
  x["env"]["RACK"] = "head"
  x["soft_fail"] = true
end

# Ugly hacks to just get the build passing for now
config.steps.find { |s| s["label"] == "activestorage (2.2)" }&.tap do |s|
  s["soft_fail"] = true
end

# Bug report templates
config.steps.select { |s| s["label"] =~ /^guides/  }.each do |s|
  s["soft_fail"] = true
end
if config.rails_version < Gem::Version.new("7.x") && config.rails_version >= Gem::Version.new("6.1")
  config.steps.delete_if { |s| s["label"] == "guides (2.7)" || s["label"] == "guides (3.0)" }
end
config.steps.delete_if { |s| s["label"] =~ /^guides/ } if config.rails_version < Gem::Version.new("7.0")

###

config.steps.sort_by! do |step|
  [
    -step["timeout_in_minutes"],
    step["group"] == "isolated" ? 2 : 1,
    step["command"].include?("test:") ? 2 : 1,
    step["label"],
  ]
end

groups = config.steps.group_by { |s| s.delete("group") }.map do |group, steps|
  { "group" => group, "steps" => steps }
end

puts YAML.dump("steps" => [
  {
    "group" => "build",
    "steps" => [
      *(config.rubies - [YJIT_RUBY]).map do |ruby|
        {
          "label" => ":docker: #{ruby}",
          "key" => "docker-image-#{ruby.gsub(/\W/, "-")}",
          "plugins" => [
            {
              Buildkite::Config::Generate::ARTIFACTS_PLUGIN => {
                "download" => [".dockerignore", ".buildkite/*", ".buildkite/**/*"],
              },
            },
            {
              Buildkite::Config::Generate::DOCKER_COMPOSE_PLUGIN => {
                "build" => "base",
                "config" => ".buildkite/docker-compose.yml",
                "env" => [
                  "PRE_STEPS",
                  "RACK"
                ],
                "image-name" => config.image_name_for(ruby, short: true),
                "cache-from" => [
                  config.rebuild_id && "base:" + config.image_name_for(ruby, config.rebuild_id),
                  config.pull_request && "base:" + config.image_name_for(ruby, "pr-#{config.pull_request}"),
                  config.local_branch && config.local_branch !~ /:/ && "base:" + config.image_name_for(ruby, "br-#{config.local_branch}"),
                  config.base_branch && "base:" + config.image_name_for(ruby, "br-#{config.base_branch}"),
                  "base:" + config.image_name_for(ruby, "br-main"),
                ].grep(String).uniq,
                "push" => [
                  config.local_branch =~ /:/ ?
                  "base:" + config.image_name_for(ruby, "pr-#{config.pull_request}") :
                  "base:" + config.image_name_for(ruby, "br-#{config.local_branch}"),
                ],
                "image-repository" => config.image_base,
              },
            },
          ],
          "env" => {
            "BUNDLER" => config.bundler,
            "RUBYGEMS" => config.rubygems,
            "RUBY_IMAGE" => config.ruby_image(ruby),
            "encrypted_0fb9444d0374_key" => nil,
            "encrypted_0fb9444d0374_iv" => nil,
          },
          "timeout_in_minutes" => 15,
          "soft_fail" => config.soft_fail.include?(ruby),
          "agents" => { "queue" => config.build_queue },
        }
      end,
    ],
  },
  *groups,
])
